import React, { useState } from 'react'
import { X, User, Baby, Heart, CheckCircle } from 'lucide-react'
import { useAuth } from '../contexts/AuthContext'

interface Props {
  onComplete: () => void
}

export const OnboardingModal: React.FC<Props> = ({ onComplete }) => {
  const { currentUser, updateUserData } = useAuth()
  const [currentStep, setCurrentStep] = useState<'welcome' | 'profile' | 'role' | 'complete'>('welcome')
  const [loading, setLoading] = useState(false)
  const [formData, setFormData] = useState({
    name: currentUser?.displayName || '',
    role: 'parent' as 'parent' | 'caretaker',
    childName: '',
    childAge: '',
    experience: ''
  })

  const handleNext = () => {
    if (currentStep === 'welcome') {
      setCurrentStep('profile')
    } else if (currentStep === 'profile') {
      setCurrentStep('role')
    } else if (currentStep === 'role') {
      setCurrentStep('complete')
    }
  }

  const handleComplete = async () => {
    if (!currentUser) return
    
    setLoading(true)
    try {
      await updateUserData({
        name: formData.name,
        role: formData.role,
        childName: formData.role === 'parent' ? formData.childName : undefined,
        childAge: formData.role === 'parent' && formData.childAge ? parseInt(formData.childAge) : undefined,
        experience: formData.role === 'caretaker' ? formData.experience : undefined,
        points: 100, // Welcome bonus
        level: 1,
        streak: 0
      })
      
      onComplete()
    } catch (error) {
      console.error('Failed to complete onboarding:', error)
    } finally {
      setLoading(false)
    }
  }

  const renderWelcomeStep = () => (
    <div className="text-center">
      <div className="w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-6">
        <Heart className="w-10 h-10 text-white" />
      </div>
      <h2 className="text-2xl font-bold text-gray-800 mb-4">‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ü‡∏π‡∏°‡∏ü‡∏±‡∏Å!</h2>
      <p className="text-gray-600 mb-6 leading-relaxed">
        ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏î‡∏π‡πÅ‡∏•‡∏•‡∏π‡∏Å‡∏ß‡∏±‡∏¢‡∏õ‡∏ê‡∏°‡∏ß‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏•‡∏π‡∏Å 
        ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πâ‡∏°‡∏™‡∏∞‡∏™‡∏° ‡πÅ‡∏•‡∏∞‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
      </p>
      <div className="bg-blue-50 p-4 rounded-lg mb-6">
        <h3 className="font-semibold text-blue-800 mb-2">‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:</h3>
        <ul className="text-sm text-blue-700 space-y-1">
          <li>‚Ä¢ ‡πÅ‡∏ï‡πâ‡∏°‡∏™‡∏∞‡∏™‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</li>
          <li>‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô</li>
          <li>‚Ä¢ ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡∏°‡∏¥‡∏ï‡∏£</li>
          <li>‚Ä¢ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏•‡∏π‡∏Å‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç</li>
        </ul>
      </div>
      <button
        onClick={handleNext}
        className="w-full bg-gradient-to-r from-blue-500 to-purple-600 text-white py-3 px-6 rounded-lg font-semibold hover:from-blue-600 hover:to-purple-700 transition-all"
      >
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
      </button>
    </div>
  )

  const renderProfileStep = () => (
    <div>
      <h2 className="text-xl font-bold text-gray-800 mb-4 text-center">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h2>
      <p className="text-gray-600 text-center mb-6">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ</p>
      
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
          <input
            type="text"
            value={formData.name}
            onChange={(e) => setFormData({ ...formData, name: e.target.value })}
            className="w-full p-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:ring-1 focus:ring-blue-500 outline-none"
            placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
            required
          />
        </div>
        
        {currentUser?.isAnonymous && (
          <div className="bg-yellow-50 p-3 rounded-lg">
            <p className="text-xs text-yellow-700">
              üí° ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏Ç‡∏Å ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            </p>
          </div>
        )}
      </div>

      <div className="flex space-x-3 mt-8">
        <button
          onClick={() => setCurrentStep('welcome')}
          className="flex-1 bg-gray-300 text-gray-700 py-3 px-6 rounded-lg font-semibold hover:bg-gray-400 transition-colors"
        >
          ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
        </button>
        <button
          onClick={handleNext}
          disabled={!formData.name.trim()}
          className="flex-1 bg-gradient-to-r from-blue-500 to-purple-600 text-white py-3 px-6 rounded-lg font-semibold hover:from-blue-600 hover:to-purple-700 transition-all disabled:opacity-50"
        >
          ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        </button>
      </div>
    </div>
  )

  const renderRoleStep = () => (
    <div>
      <h2 className="text-xl font-bold text-gray-800 mb-4 text-center">‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏Ñ‡∏£?</h2>
      <p className="text-gray-600 text-center mb-6">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p>

      <div className="space-y-4 mb-6">
        <button
          onClick={() => setFormData({ ...formData, role: 'parent' })}
          className={`w-full p-4 border-2 rounded-lg text-left transition-all ${
            formData.role === 'parent'
              ? 'border-pink-500 bg-pink-50'
              : 'border-gray-200 bg-white hover:border-pink-300'
          }`}
        >
          <div className="flex items-center">
            <div className="w-12 h-12 bg-pink-500 rounded-lg flex items-center justify-center mr-4">
              <Baby className="w-6 h-6 text-white" />
            </div>
            <div>
              <h3 className="font-semibold text-gray-800">‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á (‡∏û‡πà‡∏≠‡πÅ‡∏°‡πà)</h3>
              <p className="text-sm text-gray-600">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏•‡∏π‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
            </div>
          </div>
        </button>

        <button
          onClick={() => setFormData({ ...formData, role: 'caretaker' })}
          className={`w-full p-4 border-2 rounded-lg text-left transition-all ${
            formData.role === 'caretaker'
              ? 'border-green-500 bg-green-50'
              : 'border-gray-200 bg-white hover:border-green-300'
          }`}
        >
          <div className="flex items-center">
            <div className="w-12 h-12 bg-green-500 rounded-lg flex items-center justify-center mr-4">
              <User className="w-6 h-6 text-white" />
            </div>
            <div>
              <h3 className="font-semibold text-gray-800">‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏î‡πá‡∏Å</h3>
              <p className="text-sm text-gray-600">‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏î‡πá‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á</p>
            </div>
          </div>
        </button>
      </div>

      {formData.role === 'parent' && (
        <div className="space-y-4 bg-pink-50 p-4 rounded-lg">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å</label>
            <input
              type="text"
              value={formData.childName}
              onChange={(e) => setFormData({ ...formData, childName: e.target.value })}
              className="w-full p-3 border border-gray-300 rounded-lg focus:border-pink-500 focus:ring-1 focus:ring-pink-500 outline-none"
              placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">‡∏≠‡∏≤‡∏¢‡∏∏‡∏•‡∏π‡∏Å (‡∏õ‡∏µ)</label>
            <input
              type="number"
              value={formData.childAge}
              onChange={(e) => setFormData({ ...formData, childAge: e.target.value })}
              className="w-full p-3 border border-gray-300 rounded-lg focus:border-pink-500 focus:ring-1 focus:ring-pink-500 outline-none"
              placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏¢‡∏∏‡∏•‡∏π‡∏Å"
              min="0"
              max="10"
            />
          </div>
        </div>
      )}

      {formData.role === 'caretaker' && (
        <div className="bg-green-50 p-4 rounded-lg">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏î‡πá‡∏Å</label>
            <input
              type="text"
              value={formData.experience}
              onChange={(e) => setFormData({ ...formData, experience: e.target.value })}
              className="w-full p-3 border border-gray-300 rounded-lg focus:border-green-500 focus:ring-1 focus:ring-green-500 outline-none"
              placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏°‡∏µ 3 ‡∏õ‡∏µ, ‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏≤‡∏¢‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡πâ‡∏≤‡∏ô"
            />
          </div>
        </div>
      )}

      <div className="flex space-x-3 mt-8">
        <button
          onClick={() => setCurrentStep('profile')}
          className="flex-1 bg-gray-300 text-gray-700 py-3 px-6 rounded-lg font-semibold hover:bg-gray-400 transition-colors"
        >
          ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
        </button>
        <button
          onClick={handleNext}
          className="flex-1 bg-gradient-to-r from-blue-500 to-purple-600 text-white py-3 px-6 rounded-lg font-semibold hover:from-blue-600 hover:to-purple-700 transition-all"
        >
          ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        </button>
      </div>
    </div>
  )

  const renderCompleteStep = () => (
    <div className="text-center">
      <div className="w-20 h-20 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-6">
        <CheckCircle className="w-10 h-10 text-white" />
      </div>
      <h2 className="text-2xl font-bold text-gray-800 mb-4">‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢!</h2>
      <p className="text-gray-600 mb-6">
        ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏∞‡∏™‡∏°‡πÅ‡∏ï‡πâ‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢!
      </p>

      <div className="bg-gradient-to-r from-yellow-400 to-orange-500 p-4 rounded-lg mb-6">
        <h3 className="font-semibold text-white mb-2">üéâ ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö</h3>
        <p className="text-white text-sm">‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö 100 ‡πÅ‡∏ï‡πâ‡∏°‡∏ü‡∏£‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p>
      </div>

      <div className="bg-blue-50 p-4 rounded-lg mb-6">
        <h3 className="font-semibold text-blue-800 mb-2">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢:</h3>
        <ul className="text-sm text-blue-700 space-y-1">
          <li>‚Ä¢ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</li>
          <li>‚Ä¢ ‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô</li>
          <li>‚Ä¢ ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•</li>
          <li>‚Ä¢ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</li>
        </ul>
      </div>

      <button
        onClick={handleComplete}
        disabled={loading}
        className="w-full bg-gradient-to-r from-green-500 to-blue-600 text-white py-4 px-6 rounded-lg font-semibold hover:from-green-600 hover:to-blue-700 transition-all disabled:opacity-50"
      >
        {loading ? (
          <div className="flex items-center justify-center">
            <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
            ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...
          </div>
        ) : (
          '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏π‡∏°‡∏ü‡∏±‡∏Å!'
        )}
      </button>
    </div>
  )

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg w-full max-w-md max-h-screen overflow-y-auto mx-4">
        <div className="p-6">
          {/* Progress indicator */}
          <div className="flex items-center justify-center mb-6">
            <div className="flex space-x-2">
              {['welcome', 'profile', 'role', 'complete'].map((step, index) => (
                <div
                  key={step}
                  className={`w-3 h-3 rounded-full ${
                    step === currentStep
                      ? 'bg-blue-500'
                      : ['welcome', 'profile', 'role', 'complete'].indexOf(currentStep) > index
                      ? 'bg-green-500'
                      : 'bg-gray-300'
                  }`}
                />
              ))}
            </div>
          </div>

          {currentStep === 'welcome' && renderWelcomeStep()}
          {currentStep === 'profile' && renderProfileStep()}
          {currentStep === 'role' && renderRoleStep()}
          {currentStep === 'complete' && renderCompleteStep()}
        </div>
      </div>
    </div>
  )
}